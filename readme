Bir günlük projesi.Anılarımı hatırlamak için kullanılan bir günlük.
#Kütüphaneler
from flask import Flask, render_template, request, redirect, jsonify
#Veritabanı kütüphanesi
from flask_sqlalchemy import SQLAlchemy
import speech_recognition as speech_recog


app = Flask(__name__)
#SQLite'a bağlantı
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///diary.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
#Veritabanı oluşturmak
db = SQLAlchemy(app)
#Tablo oluşturmak

#Görev #1. Veritabanı oluşturmak
class Card(db.Model):
    #Gerekli alanları oluşturmak
    #id
    id = db.Column(db.Integer, primary_key=True)
    #Başlık
    title = db.Column(db.String(100), nullable=False)
    #Açıklama
    subtitle = db.Column(db.String(300), nullable=False)
    #Yazı
    text = db.Column(db.Text, nullable=False)

    #Objeyi çıktı olarak vermek
    def __repr__(self):
        return f'<Card {self.id}>'


#Sayfayı çalıştırma
@app.route('/')
def index():
    #Veritabanındaki objeleri çıktı vermek
    #Görev #2. Veritabanındaki objelerin index.html içinde gözükmesini sağlamak
    cards = Card.query.order_by(Card.id).all()

    return render_template('index.html', cards=cards)

#Girdilerin olduğu sayfayı çalıştırma
@app.route('/card/<int:id>')
def card(id):
    #Görev #2. id'sini kullanarak doğru girdiyi göstermek
    card = Card.query.get(id)

    return render_template('card.html', card=card)

#Girdi oluşturma sayfasını çalıştırmak
@app.route('/create')
def create():
    return render_template('create_card.html')

#Girdinin formu 
@app.route('/form_create', methods=['GET','POST'])
def form_create():
    if request.method == 'POST':
        title =  request.form['title']
        subtitle =  request.form['subtitle']
        text =  request.form['text']

        #Veritabanına paslamak için bir obje oluşturmak

        #Görev #2. Veritabanında veri depolamak için bir yöntem
        card = Card(title=title, subtitle=subtitle, text=text)
        card1 = Card(title = "Deneme Başlık", subtitle = "Deneme Alt Başlık", text = "Deneme Yazı")

        db.session.add(card)
        db.session.add(card1)
        db.session.commit()
        return redirect('/')
    else:
        return render_template('create_card.html')


# Türkçe ses tanıma fonksiyonu
def speech_tr():
    mic = speech_recog.Microphone()
    recog = speech_recog.Recognizer()

    with mic as audio_file:
        print("Dinleniyor... (Türkçe)")
        recog.adjust_for_ambient_noise(audio_file)
        audio = recog.listen(audio_file)
        try:
            return recog.recognize_google(audio, language="tr-TR")
        except:
            return "Ses tanınamadı"

# İngilizce ses tanıma fonksiyonu
def speech_en():
    mic = speech_recog.Microphone()
    recog = speech_recog.Recognizer()

    with mic as audio_file:
        print("Listening... (English)")
        recog.adjust_for_ambient_noise(audio_file)
        audio = recog.listen(audio_file)
        try:
            return recog.recognize_google(audio, language="en-GB")
        except:
            return "Speech not recognized"

# Ses tanıma API endpoint'i
@app.route('/record_audio', methods=['POST'])
def record_audio():
    language = request.form.get('language', 'tr')
    text = speech_tr() if language == 'tr' else speech_en()
    return jsonify({'text': text})

if __name__ == "__main__":
    app.run(debug=True)
